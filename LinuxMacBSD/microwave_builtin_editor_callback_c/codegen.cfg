# Output configuration options for the given language. Pipe them into a file for further use!
#
#Allows to define naming conventions for events
PrefixEvents=
#
#Allows to define naming conventions for simple states
PrefixSimpleStates=
#
#Allows to define naming conventions for composite states
PrefixCompositeStates=
#
#Allows to define naming conventions for choice states
PrefixChoice=

#
#Path to 'dot.exe'.
#DotPath="C:\\Programme\\Graphviz 2.28\\bin\\dot.exe"
DotPath=/usr/local/bin/dot
#
#Port the graphical simulator listens for event strings. 
UdpPort=4445
#
#Options 'yes' and 'no' are possible. If set to 'yes' only hot transitions are shown
ShowOnlyHotTransitions=no
#
#It is possible to limit the length of the event text. This keeps the image compact.
NumberOfTransitionChars=9
#
#If set to 'yes' only correct models can be saved.
SaveCheckedOnly=yes
#
#If set to 'yes' action code is displayed in the state diagram of the integrated editor.
DisplayEntryExitDoCode=yes
#
#Limit action code in the integrated editor to the given number of chars.
NumberOfEntryExitDoCodeChars=10
#
#

#Defines the text each generated file starts with.
Copyright=/* Sinelabore Software Tools GmbH */

#
#Prefix of the state machine function in the H file.
StateMachineFunctionPrefixHeader=void 
#
#Prefix of the state machine function in the C file.
StateMachineFunctionPrefixCFile=void 
#
#Defines if event definitions start from zero or another value.
EventFirstValue=0
#
#Defines the C mechanism used for event definition. Options are 'define' or 'enum'.
EventDeclarationType=ENUM
#
#In case events are declared as 'define' the event type can be specified here.
EventTypeInCaseOfDefine=unsigned char
#
#
TypeOfDbgString=const char
#
#This flag can be used to instruct the code generator to generate bit-coded events.
EventsAreBitCoded=no
#
#Defines if the state machine function has a pointer to the instance data as parameter.
HsmFunctionWithInstanceParameters=yes
#
#If set to 'yes' an event is generated as parameter for the state handler function. HsmFunctionWithInstanceParameter must be set to 'yes' also.
HsmFunctionWithEventParameter=yes
#
#A user provided type that is used as parameter for the state handler function. HsmFunctionWithInstanceParameter must be set to 'yes' also.
HsmFunctionUserDefinedParameter=
#
#Options 'yes' and 'no' are possible. If set to 'yes' separate entry and exit functions are generated.
SeparateExitFunction=no
#
#Prefix of the entry/exit functions in the state machine C-file. 
SeparateExitEntryFunctionsPrefixCFile=void 
#
#Prefix of the entry/exit functions in the state machine H-file.
SeparateExitEntryFunctionsPrefixHFile=void 
#
#Prefix the message variable (msg) within the state machine with the machine name.
PrefixMsgWithMachineName=no
#
#If set to 'no' instance data is accessed by value. If set to 'yes' instance data is accessed by reference. 
UseInstancePointer=yes
#
#If set to 'yes' the code to change the state variables is inlined.
InlineChangeToStateCode=yes
#
#Allows to define local variables etc. within the state machine.
AdditionalLocalMachineVars=
#
#Allows to define code that is executed if a state variable holds an invalid state.
UnknownStateHandler=
#
#Return a value that indicates if an event was processed.
ReturnEventProcessed=No
#
# Set to yes to creates validation code in the state machine and the validation c/h files
# You have to provide the validation handler that actually calls the validate function.
# If validation fails it is up to you to define the reaction.
ValidationCall=no
#
#
# Provide your own inlcude file here which defines the required data types
AdditionalValidateIncludes=#include <stdint.h>
#
#
#Provide your own include file for the definition of simple data types used in the state machine header file.
AdditionalMachineInclude=#include <stdint.h>
#
#Provide an own definition for this data type
UINT8=uint8_t
#
#Provide an own definition for this data type
UINT16=uint16_t
#
#Provide an own definition for this data type
BOOL=uint8_t

